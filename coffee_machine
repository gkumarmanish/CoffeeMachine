
# Class For Coffee Machine
class CoffeeMachine(object):
	# Set the initial values
	def __init__(self, outlets = {}, total_items_quantity = {}):
		"""
		:param outlets: Get the Outlet Configurations thier count etc
		:param total_items_quantity: Total item quantity represent the inventory
		"""
		self.n = outlets.get('count_n')
		self.inventory_details = total_items_quantity
	
	
	# Method to check given beverage present in inventory
	def check_ingredients_present_in_inventory( self, beverage ):
		"""
		:param beverage:
		:return: Ingredient and their respective message else return False
		"""
		for item in beverage:
			if self.inventory_details.get(item) == None:
				return item, "available"
		for item in beverage:
			if self.inventory_details.get(item) < beverage.get(item):
				return item, "sufficient"
		return False, False
	
	
	# Method to update the inventory
	def update_inventory( self, beverage ):
		for item in beverage:
			self.inventory_details[item] -= beverage[item]
			
	
	
	#Refill the ingredient if any running low
	def refill_ingredients( self, ingredient, quantity ):
		if self.inventory_details.get(ingredient):
			self.inventory_details[ingredient] += quantity
		else:
			self.inventory_details[ingredient] = quantity
			
	
	# Method to prepare beverages
	def prepare( self, request_beverages ):
		c = 0
		for beverage in request_beverages:
			if c >= self.n: #Check Any outlet is free for serving the beverage or not
				print("All Outlets are occupied")
				continue
			item, response = self.check_ingredients_present_in_inventory(request_beverages.get(beverage)) # Check ingredient present in inventory or not
			if not response:
				self.update_inventory( request_beverages.get( beverage ) ) # Update the inventory
				print("%s is prepared" % beverage) # Print the Response if beverage prepared
				c += 1
			else:
				print("%s cannot be prepared because %s is not %s" % (beverage, item, response)) # If not sufficient or available the print the message
			
	
request_data = {"machine":{"outlets":{"count_n":3},"beverages":{"hot_tea":{"hot_milk":100,"hot_water":200,"sugar_syrup":10,"ginger_syrup":10,"tea_leaves_syrup":30},"black_tea":{"hot_water":300,"sugar_syrup":50,"ginger_syrup":30,"tea_leaves_syrup":30},"green_tea":{"hot_water":100,"sugar_syrup":50,"ginger_syrup":30,"green_mixture":30},"hot_coffee":{"hot_milk":400,"hot_water":100,"sugar_syrup":50,"ginger_syrup":30,"tea_leaves_syrup":30}},"total_items_quantity":{"hot_milk":500,"hot_water":500,"sugar_syrup":100,"ginger_syrup":100,"tea_leaves_syrup":100}}}


coffee_machine = CoffeeMachine( request_data.get('machine').get('outlets'), request_data.get('machine').get('total_items_quantity') ) #Call initial coffee machine setup

coffee_machine.prepare( request_data.get('machine').get('beverages') ) # Call Prepare for given beverages

coffee_machine.refill_ingredients('green_mixture', 300)
coffee_machine.refill_ingredients('hot_water', 1500)
coffee_machine.refill_ingredients('sugar_syrup', 500)
coffee_machine.refill_ingredients('tea_leaves_syrup', 500)
coffee_machine.refill_ingredients('ginger_syrup', 500)

print("**")
coffee_machine.prepare( request_data.get('machine').get('beverages') )
